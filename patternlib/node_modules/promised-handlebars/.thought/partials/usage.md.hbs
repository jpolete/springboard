## Usage

`{{{package.name}}}` creates a new a Handlebars-instance with wrapped
`compile`-method and `registerHelper`-method to allow 
helpers that return promises.

As a side-effect (in order to allow asynchronous template execution)
the compiled template-function itself always returns a promise instead
of a string.

### Simple helpers 

Simple helpers can just return promises.

{{{example 'examples/example.js'}}}

This will generate the following output: 
{{{exec 'node example.js' cwd='examples/' lang='inline' }}}

### Block helpers

If a block-helper, calls the helper-contents (`options.fn`) and the else-block 
(`options.inverse`) asynchronously, i.e. from within a promise chain those functions 
may return a promise. 

When those methods is called synchronously they return the value as they do in default Handlebars.  
This means that helper-libraries written for Handlebars will still work, but you can also write
block-helpers that do some asynchronous work before evaluating the block contents, such as:

{{{example 'examples/example-block-helper.js'}}}

This will generate the following output: 
{{{exec 'node example-block-helper.js' cwd='examples/' lang='inline'}}}



